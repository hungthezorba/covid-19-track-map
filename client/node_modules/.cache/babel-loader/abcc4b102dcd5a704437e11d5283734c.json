{"ast":null,"code":"var _jsxFileName = \"/Users/HungNguyen/SideProject/covid-19-track-map/client/src/mapBox.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\nmapboxgl.accessToken = 'pk.eyJ1IjoiaHVuZ3RoZXpvcmJhIiwiYSI6ImNrYnE5MTZxYjJrNmMyc3B2YXZtdnFjb20ifQ.iEtRPDaQs56Mr53uQEh65A';\nexport default class MapBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 106.660172,\n      lat: 10.762622,\n      zoom: 2,\n      dotSize: 100,\n      data: [],\n      testdata: [{\n        \"type\": \"Feature\",\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [1.601554, 42.546245]\n        },\n        \"properties\": {\n          \"title\": \"Andorra\",\n          \"description\": \"<strong>Total Confirmed:</strong><p>855</p><strong>Total Deaths:</strong> <p>52</p>\"\n        }\n      }, {\n        \"type\": \"Feature\",\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [0, 1]\n        },\n        \"properties\": {\n          \"title\": \"Andorra\",\n          \"description\": \"<strong>Total Confirmed:</strong><p>855</p><strong>Total Deaths:</strong> <p>52</p>\"\n        }\n      }]\n    };\n  }\n\n  fetchCovid19API() {\n    fetch('http://localhost:8080/').then(res => res.json()).then(result => {\n      result.forEach(item => {\n        var tempJson = {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [item.longitude, item.latitude]\n          },\n          properties: {\n            title: item.Country,\n            description: `<p><strong>Total Confirmed:</strong>${item.TotalConfirmed}</p><p><strong>Total Deaths:</strong> ${item.TotalDeaths}</p>`\n          }\n        };\n        var joined = this.state.data.concat(tempJson);\n        this.setState({\n          data: joined\n        });\n      });\n      this.createMap(this.state.data);\n    });\n  }\n\n  createMap(data) {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n    const dotSize = this.state.dotSize;\n    const pulsingDot = {\n      width: dotSize,\n      height: dotSize,\n      data: new Uint8Array(dotSize * dotSize * 4),\n      onAdd: function () {\n        var canvas = document.createElement('canvas');\n        this.context = canvas.getContext('2d');\n      },\n      render: function () {\n        var duration = 1000;\n        var t = performance.now() % duration / duration;\n        var radius = dotSize / 2 * 0.3;\n        var outerRadius = dotSize / 2 * 0.7 * t + radius;\n        var context = this.context; // draw outer circle\n\n        context.clearRect(0, 0, this.width, this.height);\n        context.beginPath();\n        context.arc(this.width / 2, this.height / 2, outerRadius, 0, Math.PI * 2);\n        context.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')';\n        context.fill(); // draw inner circle\n\n        context.beginPath();\n        context.arc(this.width / 2, this.height / 2, radius, 0, Math.PI * 2);\n        context.fillStyle = 'rgba(255, 100, 100, 1)';\n        context.strokeStyle = 'white';\n        context.lineWidth = 2 + 4 * (1 - t);\n        context.fill();\n        context.stroke(); // update this image's data with data from the canvas\n\n        this.data = context.getImageData(0, 0, this.width, this.height).data; // continuously repaint the map, resulting in the smooth animation of the dot\n\n        map.triggerRepaint(); // return `true` to let the map know that the image was updated\n\n        return true;\n      }\n    };\n    var geodata = data;\n    map.on('load', function () {\n      map.addImage('pulsing-dot', pulsingDot, {\n        pixelRatio: 2\n      });\n      map.addSource('points', {\n        'type': 'geojson',\n        'data': {\n          'type': 'FeatureCollection',\n          'features': geodata\n        }\n      });\n      map.addLayer({\n        'id': 'points',\n        'type': 'symbol',\n        'source': 'points',\n        'layout': {\n          'icon-image': 'pulsing-dot'\n        }\n      });\n      map.on('click', 'points', function (e) {\n        var coordinates = e.features[0].geometry.coordinates.slice();\n        var description = e.features[0].properties.description; // Ensure that if the map is zoomed out such that multiple\n        // copies of the feature are visible, the popup appears\n        // over the copy being pointed to.\n\n        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n        }\n\n        new mapboxgl.Popup({\n          className: \"pop-up-map-box\"\n        }).setLngLat(coordinates).setHTML(description).addTo(map);\n      });\n      map.on('mouseenter', 'points', function () {\n        map.getCanvas().style.cursor = 'pointer';\n      }); // Change it back to a pointer when it leaves.\n\n      map.on('mouseleave', 'points', function () {\n        map.getCanvas().style.cursor = '';\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.fetchCovid19API();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: element => this.mapContainer = element,\n      className: \"mapContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/HungNguyen/SideProject/covid-19-track-map/client/src/mapBox.js"],"names":["React","ReactDOM","mapboxgl","accessToken","MapBox","Component","constructor","props","state","lng","lat","zoom","dotSize","data","testdata","fetchCovid19API","fetch","then","res","json","result","forEach","item","tempJson","type","geometry","coordinates","longitude","latitude","properties","title","Country","description","TotalConfirmed","TotalDeaths","joined","concat","setState","createMap","map","Map","container","mapContainer","style","center","pulsingDot","width","height","Uint8Array","onAdd","canvas","document","createElement","context","getContext","render","duration","t","performance","now","radius","outerRadius","clearRect","beginPath","arc","Math","PI","fillStyle","fill","strokeStyle","lineWidth","stroke","getImageData","triggerRepaint","geodata","on","addImage","pixelRatio","addSource","addLayer","e","features","slice","abs","lngLat","Popup","className","setLngLat","setHTML","addTo","getCanvas","cursor","componentDidMount","element"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiaHVuZ3RoZXpvcmJhIiwiYSI6ImNrYnE5MTZxYjJrNmMyc3B2YXZtdnFjb20ifQ.iEtRPDaQs56Mr53uQEh65A';\n\n\n\nexport default class MapBox extends React.Component {\n\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            lng: 106.660172,\n            lat: 10.762622,\n            zoom: 2,\n            dotSize: 100,\n            data: [],\n            testdata : [\n                {\"type\":\"Feature\",\n                \"geometry\": {\n                    \"type\":\"Point\",\n                    \"coordinates\":[1.601554,42.546245]\n                },\n                \"properties\": {\n                    \"title\":\"Andorra\",\n                    \"description\":\"<strong>Total Confirmed:</strong><p>855</p><strong>Total Deaths:</strong> <p>52</p>\"\n                }\n            },\n            {\"type\":\"Feature\",\n                \"geometry\": {\n                    \"type\":\"Point\",\n                    \"coordinates\":[0,1]\n                },\n                \"properties\": {\n                    \"title\":\"Andorra\",\n                    \"description\":\"<strong>Total Confirmed:</strong><p>855</p><strong>Total Deaths:</strong> <p>52</p>\"\n                }\n            }\n\n        ]\n        }\n\n    }\n\n    fetchCovid19API() {\n        fetch('http://localhost:8080/')\n        .then(res => res.json())\n        .then(result => {\n            result.forEach(item => {\n                var tempJson = {\n                    type: 'Feature',\n                    geometry: {\n                        type: 'Point',\n                        coordinates: [item.longitude, item.latitude]\n                    },\n                    properties: {\n                        title: item.Country,\n                        description: `<p><strong>Total Confirmed:</strong>${item.TotalConfirmed}</p><p><strong>Total Deaths:</strong> ${item.TotalDeaths}</p>`\n                    }\n                }\n                var joined = this.state.data.concat(tempJson)\n                this.setState({data: joined})\n            })\n            this.createMap(this.state.data)\n        })\n    \n    }\n\n    createMap(data) {\n        const map = new mapboxgl.Map({\n            container: this.mapContainer,\n            style: 'mapbox://styles/mapbox/streets-v11',\n            center: [this.state.lng, this.state.lat],\n            zoom: this.state.zoom\n        });\n\n\n        const dotSize = this.state.dotSize\n\n\n        const pulsingDot = {\n            width: dotSize,\n            height: dotSize,\n            data: new Uint8Array(dotSize * dotSize * 4),\n            onAdd: function () {\n                var canvas = document.createElement('canvas');\n                this.context = canvas.getContext('2d');\n            },\n            render: function () {\n                var duration = 1000;\n                var t = (performance.now() % duration) / duration;\n\n                var radius = (dotSize / 2) * 0.3;\n                var outerRadius = (dotSize / 2) * 0.7 * t + radius;\n                var context = this.context;\n\n                // draw outer circle\n                context.clearRect(0, 0, this.width, this.height);\n                context.beginPath();\n                context.arc(\n                    this.width / 2,\n                    this.height / 2,\n                    outerRadius,\n                    0,\n                    Math.PI * 2\n                );\n                context.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')';\n                context.fill();\n\n                // draw inner circle\n                context.beginPath();\n                context.arc(\n                    this.width / 2,\n                    this.height / 2,\n                    radius,\n                    0,\n                    Math.PI * 2\n                );\n                context.fillStyle = 'rgba(255, 100, 100, 1)';\n                context.strokeStyle = 'white';\n                context.lineWidth = 2 + 4 * (1 - t);\n                context.fill();\n                context.stroke();\n\n                // update this image's data with data from the canvas\n                this.data = context.getImageData(\n                    0,\n                    0,\n                    this.width,\n                    this.height\n                ).data;\n\n                // continuously repaint the map, resulting in the smooth animation of the dot\n                map.triggerRepaint();\n\n                // return `true` to let the map know that the image was updated\n                return true;\n            }\n        }\n        var geodata = data\n        \n        map.on('load', function () {\n            map.addImage('pulsing-dot', pulsingDot, { pixelRatio: 2 });\n            map.addSource('points', {\n                'type': 'geojson',\n                'data': {\n                    'type': 'FeatureCollection',\n                    'features': geodata\n                }\n            });\n\n            \n            map.addLayer({\n                'id': 'points',\n                'type': 'symbol',\n                'source': 'points',\n                'layout': {\n                    'icon-image': 'pulsing-dot'\n                }\n            });\n\n            map.on('click', 'points', function(e) {\n                var coordinates = e.features[0].geometry.coordinates.slice();\n                var description = e.features[0].properties.description;\n                 \n                // Ensure that if the map is zoomed out such that multiple\n                // copies of the feature are visible, the popup appears\n                // over the copy being pointed to.\n                while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n                }\n                 \n                new mapboxgl.Popup({className: \"pop-up-map-box\"})\n                .setLngLat(coordinates)\n                .setHTML(description)\n                .addTo(map);\n                });\n                map.on('mouseenter', 'points', function() {\n                    map.getCanvas().style.cursor = 'pointer';\n                    });\n                     \n                    // Change it back to a pointer when it leaves.\n                    map.on('mouseleave', 'points', function() {\n                    map.getCanvas().style.cursor = '';\n                    });\n\n        });\n        \n    }\n\n\n\n    componentDidMount() {\n        this.fetchCovid19API()\n    }\n\n\n\n\n    render() {\n        return (\n            <div>\n                <div ref={element => this.mapContainer = element} className=\"mapContainer\" />\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}