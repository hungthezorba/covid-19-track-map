{"ast":null,"code":"var _jsxFileName = \"/Users/HungNguyen/SideProject/covid-19-track-map/client/src/mapBox.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\n\nrequire('dotenv').config();\n\nmapboxgl.accessToken = process.env.REACT_APP_MAP_BOX_TOKEN;\nexport default class MapBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 106.660172,\n      lat: 10.762622,\n      zoom: 2,\n      dotSize: 100,\n      covidData: [],\n      geoData: [],\n      testdata: [{\n        \"type\": \"Feature\",\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [1.601554, 42.546245]\n        },\n        \"properties\": {\n          \"title\": \"Andorra\",\n          \"description\": \"<strong>Total Confirmed:</strong><p>855</p><strong>Total Deaths:</strong> <p>52</p>\"\n        }\n      }, {\n        \"type\": \"Feature\",\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [0, 1]\n        },\n        \"properties\": {\n          \"title\": \"Andorra\",\n          \"description\": \"<strong>Total Confirmed:</strong><p>855</p><strong>Total Deaths:</strong> <p>52</p>\"\n        }\n      }]\n    };\n  }\n\n  fetchCovid19API() {\n    fetch('http://localhost:8080/').then(res => res.json()).then(result => {\n      result.forEach(item => {\n        var tempJson = {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [item.longitude, item.latitude]\n          },\n          properties: {\n            title: item.Country,\n            description: `<p><strong>Total Confirmed: </strong>${item.TotalConfirmed}</p><p><strong>Total Deaths: </strong>${item.TotalDeaths}</p>`\n          }\n        };\n        var joined = this.state.geoData.concat(tempJson);\n        this.setState({\n          covidData: result,\n          geoData: joined\n        });\n      });\n    });\n  } // createMap(geoData) {\n  //     const map = new mapboxgl.Map({\n  //         container: this.mapContainer,\n  //         style: 'mapbox://styles/mapbox/streets-v11',\n  //         center: [this.state.lng, this.state.lat],\n  //         zoom: this.state.zoom\n  //     });\n  //     const dotSize = this.state.dotSize\n  //     const pulsingDot = {\n  //         width: dotSize,\n  //         height: dotSize,\n  //         data: new Uint8Array(dotSize * dotSize * 4),\n  //         onAdd: function () {\n  //             var canvas = document.createElement('canvas');\n  //             this.context = canvas.getContext('2d');\n  //         },\n  //         render: function () {\n  //             var duration = 2000;\n  //             var t = (performance.now() % duration) / duration;\n  //             var radius = (dotSize / 2) * 0.3;\n  //             var outerRadius = (dotSize / 2) * 0.7 * t + radius;\n  //             var context = this.context;\n  //             // draw outer circle\n  //             context.clearRect(0, 0, this.width, this.height);\n  //             context.beginPath();\n  //             context.arc(\n  //                 this.width / 2,\n  //                 this.height / 2,\n  //                 outerRadius,\n  //                 0,\n  //                 Math.PI * 2\n  //             );\n  //             context.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')';\n  //             context.fill();\n  //             // draw inner circle\n  //             context.beginPath();\n  //             context.arc(\n  //                 this.width / 2,\n  //                 this.height / 2,\n  //                 radius,\n  //                 0,\n  //                 Math.PI * 2\n  //             );\n  //             context.fillStyle = 'rgba(255, 100, 100, 1)';\n  //             context.strokeStyle = 'white';\n  //             context.lineWidth = 2 + 4 * (1 - t);\n  //             context.fill();\n  //             context.stroke();\n  //             // update this image's data with data from the canvas\n  //             this.data = context.getImageData(\n  //                 0,\n  //                 0,\n  //                 this.width,\n  //                 this.height\n  //             ).data;\n  //             // continuously repaint the map, resulting in the smooth animation of the dot\n  //             map.triggerRepaint();\n  //             // return `true` to let the map know that the image was updated\n  //             return true;\n  //         }\n  //     }\n  //     map.on('load', function () {\n  //         map.addImage('pulsing-dot', pulsingDot, { pixelRatio: 2 });\n  //         map.addSource('points', {\n  //             'type': 'geojson',\n  //             'data': {\n  //                 'type': 'FeatureCollection',\n  //                 'features': geoData\n  //             }\n  //         });\n  //         map.addLayer({\n  //             'id': 'points',\n  //             'type': 'symbol',\n  //             'source': 'points',\n  //             'layout': {\n  //                 'icon-image': 'pulsing-dot'\n  //             }\n  //         });\n  //         map.on('click', 'points', function (e) {\n  //             var coordinates = e.features[0].geometry.coordinates.slice();\n  //             var description = e.features[0].properties.description;\n  //             // Ensure that if the map is zoomed out such that multiple\n  //             // copies of the feature are visible, the popup appears\n  //             // over the copy being pointed to.\n  //             while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n  //                 coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n  //             }\n  //             new mapboxgl.Popup({ className: \"pop-up-map-box\" })\n  //                 .setLngLat(coordinates)\n  //                 .setHTML(description)\n  //                 .addTo(map);\n  //         });\n  //         map.on('mouseenter', 'points', function () {\n  //             map.getCanvas().style.cursor = 'pointer';\n  //         });\n  //         // Change it back to a pointer when it leaves.\n  //         map.on('mouseleave', 'points', function () {\n  //             map.getCanvas().style.cursor = '';\n  //         });\n  //     });\n  // }\n  // flyToCountry(currentFeature) {\n  //     map.fly\n  // }\n\n\n  componentDidMount() {\n    this.fetchCovid19API();\n    this.map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n    const dotSize = this.dotSize;\n    this.map.on('load', function () {\n      this.map.addLayer({\n        'id': 'points',\n        'type': 'symbol',\n        'source': 'points',\n        'layout': {\n          'icon-image': 'pulsing-dot'\n        }\n      });\n      this.map.on('click', 'points', function (e) {\n        var coordinates = e.features[0].geometry.coordinates.slice();\n        var description = e.features[0].properties.description; // Ensure that if the map is zoomed out such that multiple\n        // copies of the feature are visible, the popup appears\n        // over the copy being pointed to.\n\n        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n        }\n\n        new mapboxgl.Popup({\n          className: \"pop-up-map-box\"\n        }).setLngLat(coordinates).setHTML(description).addTo(this.map);\n      });\n      this.map.on('mouseenter', 'points', function () {\n        this.map.getCanvas().style.cursor = 'pointer';\n      }); // Change it back to a pointer when it leaves.\n\n      this.map.on('mouseleave', 'points', function () {\n        this.map.getCanvas().style.cursor = '';\n      });\n    });\n  }\n\n  addMarker() {\n    const {\n      geoData,\n      dotSize\n    } = useState({\n      geoData,\n      dotSize\n    });\n    const pulsingDot = {\n      width: dotSize,\n      height: dotSize,\n      data: new Uint8Array(dotSize * dotSize * 4),\n      onAdd: function () {\n        var canvas = document.createElement('canvas');\n        this.context = canvas.getContext('2d');\n      },\n      render: function () {\n        var duration = 2000;\n        var t = performance.now() % duration / duration;\n        var radius = dotSize / 2 * 0.3;\n        var outerRadius = dotSize / 2 * 0.7 * t + radius;\n        var context = this.context; // draw outer circle\n\n        context.clearRect(0, 0, this.width, this.height);\n        context.beginPath();\n        context.arc(this.width / 2, this.height / 2, outerRadius, 0, Math.PI * 2);\n        context.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')';\n        context.fill(); // draw inner circle\n\n        context.beginPath();\n        context.arc(this.width / 2, this.height / 2, radius, 0, Math.PI * 2);\n        context.fillStyle = 'rgba(255, 100, 100, 1)';\n        context.strokeStyle = 'white';\n        context.lineWidth = 2 + 4 * (1 - t);\n        context.fill();\n        context.stroke(); // update this image's data with data from the canvas\n\n        this.data = context.getImageData(0, 0, this.width, this.height).data; // continuously repaint the map, resulting in the smooth animation of the dot\n\n        this.map.triggerRepaint(); // return `true` to let the map know that the image was updated\n\n        return true;\n      }\n    };\n    this.map.addImage('pulsing-dot', pulsingDot, {\n      pixelRatio: 2\n    });\n    this.map.addSource('points', {\n      'type': 'geojson',\n      'data': {\n        'type': 'FeatureCollection',\n        'features': geoData\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: element => this.mapContainer = element,\n      className: \"mapContainer pad2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar pad2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"listings\",\n      className: \"listings\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 21\n      }\n    }, this.state.covidData.map((country, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"item\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"title\",\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 33\n      }\n    }, country.Country), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 33\n      }\n    }, country.TotalConfirmed))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/HungNguyen/SideProject/covid-19-track-map/client/src/mapBox.js"],"names":["React","useState","ReactDOM","mapboxgl","require","config","accessToken","process","env","REACT_APP_MAP_BOX_TOKEN","MapBox","Component","constructor","props","state","lng","lat","zoom","dotSize","covidData","geoData","testdata","fetchCovid19API","fetch","then","res","json","result","forEach","item","tempJson","type","geometry","coordinates","longitude","latitude","properties","title","Country","description","TotalConfirmed","TotalDeaths","joined","concat","setState","componentDidMount","map","Map","container","mapContainer","style","center","on","addLayer","e","features","slice","Math","abs","lngLat","Popup","className","setLngLat","setHTML","addTo","getCanvas","cursor","addMarker","pulsingDot","width","height","data","Uint8Array","onAdd","canvas","document","createElement","context","getContext","render","duration","t","performance","now","radius","outerRadius","clearRect","beginPath","arc","PI","fillStyle","fill","strokeStyle","lineWidth","stroke","getImageData","triggerRepaint","addImage","pixelRatio","addSource","element","country","index"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\n\nrequire('dotenv').config()\n\nmapboxgl.accessToken = process.env.REACT_APP_MAP_BOX_TOKEN;\n\n\n\nexport default class MapBox extends React.Component {\n\n    map;\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            lng: 106.660172,\n            lat: 10.762622,\n            zoom: 2,\n            dotSize: 100,\n            covidData: [],\n            geoData: [],\n            testdata: [\n                {\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [1.601554, 42.546245]\n                    },\n                    \"properties\": {\n                        \"title\": \"Andorra\",\n                        \"description\": \"<strong>Total Confirmed:</strong><p>855</p><strong>Total Deaths:</strong> <p>52</p>\"\n                    }\n                },\n                {\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [0, 1]\n                    },\n                    \"properties\": {\n                        \"title\": \"Andorra\",\n                        \"description\": \"<strong>Total Confirmed:</strong><p>855</p><strong>Total Deaths:</strong> <p>52</p>\"\n                    }\n                }\n\n            ]\n        }\n\n    }\n\n    fetchCovid19API() {\n        fetch('http://localhost:8080/')\n            .then(res => res.json())\n            .then(result => {\n                result.forEach(item => {\n                    var tempJson = {\n                        type: 'Feature',\n                        geometry: {\n                            type: 'Point',\n                            coordinates: [item.longitude, item.latitude]\n                        },\n                        properties: {\n                            title: item.Country,\n                            description: `<p><strong>Total Confirmed: </strong>${item.TotalConfirmed}</p><p><strong>Total Deaths: </strong>${item.TotalDeaths}</p>`\n                        }\n                    }\n                    var joined = this.state.geoData.concat(tempJson)\n                    this.setState({ covidData: result, geoData: joined })\n                })\n            })\n\n    }\n\n    // createMap(geoData) {\n    //     const map = new mapboxgl.Map({\n    //         container: this.mapContainer,\n    //         style: 'mapbox://styles/mapbox/streets-v11',\n    //         center: [this.state.lng, this.state.lat],\n    //         zoom: this.state.zoom\n    //     });\n\n\n    //     const dotSize = this.state.dotSize\n\n\n    //     const pulsingDot = {\n    //         width: dotSize,\n    //         height: dotSize,\n    //         data: new Uint8Array(dotSize * dotSize * 4),\n    //         onAdd: function () {\n    //             var canvas = document.createElement('canvas');\n    //             this.context = canvas.getContext('2d');\n    //         },\n    //         render: function () {\n    //             var duration = 2000;\n    //             var t = (performance.now() % duration) / duration;\n\n    //             var radius = (dotSize / 2) * 0.3;\n    //             var outerRadius = (dotSize / 2) * 0.7 * t + radius;\n    //             var context = this.context;\n\n    //             // draw outer circle\n    //             context.clearRect(0, 0, this.width, this.height);\n    //             context.beginPath();\n    //             context.arc(\n    //                 this.width / 2,\n    //                 this.height / 2,\n    //                 outerRadius,\n    //                 0,\n    //                 Math.PI * 2\n    //             );\n    //             context.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')';\n    //             context.fill();\n\n    //             // draw inner circle\n    //             context.beginPath();\n    //             context.arc(\n    //                 this.width / 2,\n    //                 this.height / 2,\n    //                 radius,\n    //                 0,\n    //                 Math.PI * 2\n    //             );\n    //             context.fillStyle = 'rgba(255, 100, 100, 1)';\n    //             context.strokeStyle = 'white';\n    //             context.lineWidth = 2 + 4 * (1 - t);\n    //             context.fill();\n    //             context.stroke();\n\n    //             // update this image's data with data from the canvas\n    //             this.data = context.getImageData(\n    //                 0,\n    //                 0,\n    //                 this.width,\n    //                 this.height\n    //             ).data;\n\n    //             // continuously repaint the map, resulting in the smooth animation of the dot\n    //             map.triggerRepaint();\n\n    //             // return `true` to let the map know that the image was updated\n    //             return true;\n    //         }\n    //     }\n\n    //     map.on('load', function () {\n    //         map.addImage('pulsing-dot', pulsingDot, { pixelRatio: 2 });\n    //         map.addSource('points', {\n    //             'type': 'geojson',\n    //             'data': {\n    //                 'type': 'FeatureCollection',\n    //                 'features': geoData\n    //             }\n    //         });\n\n\n    //         map.addLayer({\n    //             'id': 'points',\n    //             'type': 'symbol',\n    //             'source': 'points',\n    //             'layout': {\n    //                 'icon-image': 'pulsing-dot'\n    //             }\n    //         });\n\n    //         map.on('click', 'points', function (e) {\n    //             var coordinates = e.features[0].geometry.coordinates.slice();\n    //             var description = e.features[0].properties.description;\n\n    //             // Ensure that if the map is zoomed out such that multiple\n    //             // copies of the feature are visible, the popup appears\n    //             // over the copy being pointed to.\n    //             while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n    //                 coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n    //             }\n\n    //             new mapboxgl.Popup({ className: \"pop-up-map-box\" })\n    //                 .setLngLat(coordinates)\n    //                 .setHTML(description)\n    //                 .addTo(map);\n    //         });\n    //         map.on('mouseenter', 'points', function () {\n    //             map.getCanvas().style.cursor = 'pointer';\n    //         });\n\n    //         // Change it back to a pointer when it leaves.\n    //         map.on('mouseleave', 'points', function () {\n    //             map.getCanvas().style.cursor = '';\n    //         });\n\n    //     });\n\n    // }\n\n    // flyToCountry(currentFeature) {\n    //     map.fly\n    // }\n    componentDidMount() {\n        this.fetchCovid19API()\n        this.map = new mapboxgl.Map({\n                    container: this.mapContainer,\n                    style: 'mapbox://styles/mapbox/streets-v11',\n                    center: [this.state.lng, this.state.lat],\n                    zoom: this.state.zoom\n                });\n        \n        \n                const dotSize = this.dotSize\n\n                this.map.on('load', function () {\n                    \n        \n                    this.map.addLayer({\n                        'id': 'points',\n                        'type': 'symbol',\n                        'source': 'points',\n                        'layout': {\n                            'icon-image': 'pulsing-dot'\n                        }\n                    });\n        \n                    this.map.on('click', 'points', function (e) {\n                        var coordinates = e.features[0].geometry.coordinates.slice();\n                        var description = e.features[0].properties.description;\n        \n                        // Ensure that if the map is zoomed out such that multiple\n                        // copies of the feature are visible, the popup appears\n                        // over the copy being pointed to.\n                        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n                            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n                        }\n        \n                        new mapboxgl.Popup({ className: \"pop-up-map-box\" })\n                            .setLngLat(coordinates)\n                            .setHTML(description)\n                            .addTo(this.map);\n                    });\n                    this.map.on('mouseenter', 'points', function () {\n                        this.map.getCanvas().style.cursor = 'pointer';\n                    });\n        \n                    // Change it back to a pointer when it leaves.\n                    this.map.on('mouseleave', 'points', function () {\n                        this.map.getCanvas().style.cursor = '';\n                    });\n        \n                });\n    }\n\n    addMarker() {\n        const {geoData, dotSize} = useState({geoData, dotSize})\n        const pulsingDot = {\n            width: dotSize,\n            height: dotSize,\n            data: new Uint8Array(dotSize * dotSize * 4),\n            onAdd: function () {\n                var canvas = document.createElement('canvas');\n                this.context = canvas.getContext('2d');\n            },\n            render: function () {\n                var duration = 2000;\n                var t = (performance.now() % duration) / duration;\n\n                var radius = (dotSize / 2) * 0.3;\n                var outerRadius = (dotSize / 2) * 0.7 * t + radius;\n                var context = this.context;\n\n                // draw outer circle\n                context.clearRect(0, 0, this.width, this.height);\n                context.beginPath();\n                context.arc(\n                    this.width / 2,\n                    this.height / 2,\n                    outerRadius,\n                    0,\n                    Math.PI * 2\n                );\n                context.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')';\n                context.fill();\n\n                // draw inner circle\n                context.beginPath();\n                context.arc(\n                    this.width / 2,\n                    this.height / 2,\n                    radius,\n                    0,\n                    Math.PI * 2\n                );\n                context.fillStyle = 'rgba(255, 100, 100, 1)';\n                context.strokeStyle = 'white';\n                context.lineWidth = 2 + 4 * (1 - t);\n                context.fill();\n                context.stroke();\n\n                // update this image's data with data from the canvas\n                this.data = context.getImageData(\n                    0,\n                    0,\n                    this.width,\n                    this.height\n                ).data;\n\n                // continuously repaint the map, resulting in the smooth animation of the dot\n                this.map.triggerRepaint();\n\n                // return `true` to let the map know that the image was updated\n                return true;\n            }\n        }\n        this.map.addImage('pulsing-dot', pulsingDot, { pixelRatio: 2 });\n        this.map.addSource('points', {\n                        'type': 'geojson',\n                        'data': {\n                            'type': 'FeatureCollection',\n                            'features': geoData\n                        }\n        });\n    }\n\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div ref={element => this.mapContainer = element} className=\"mapContainer pad2\" />\n                <div className=\"sidebar pad2\">\n                    <div className=\"heading\">\n                        <h1></h1>\n                    </div>\n                    <div id=\"listings\" className=\"listings\">\n                        {this.state.covidData.map((country, index) =>\n                            <div className=\"item\" key={index}>\n                                <a className=\"title\" href=\"#\">{country.Country}</a>\n                                <div>{country.TotalConfirmed}</div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}