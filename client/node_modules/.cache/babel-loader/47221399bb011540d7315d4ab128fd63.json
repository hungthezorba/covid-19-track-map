{"ast":null,"code":"var _jsxFileName = \"/Users/HungNguyen/SideProject/covid-19-track-map/src/mapBox.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\nmapboxgl.accessToken = 'pk.eyJ1IjoiaHVuZ3RoZXpvcmJhIiwiYSI6ImNrYnE5MTZxYjJrNmMyc3B2YXZtdnFjb20ifQ.iEtRPDaQs56Mr53uQEh65A';\nvar pulsingDot = {\n  width: size,\n  height: size,\n  data: new Uint8Array(size * size * 4),\n  // get rendering context for the map canvas when layer is added to the map\n  onAdd: function () {\n    var canvas = document.createElement('canvas');\n    canvas.width = this.width;\n    canvas.height = this.height;\n    this.context = canvas.getContext('2d');\n  },\n  // called once before every frame where the icon will be used\n  render: function () {\n    var duration = 1000;\n    var t = performance.now() % duration / duration;\n    var radius = size / 2 * 0.3;\n    var outerRadius = size / 2 * 0.7 * t + radius;\n    var context = this.context; // draw outer circle\n\n    context.clearRect(0, 0, this.width, this.height);\n    context.beginPath();\n    context.arc(this.width / 2, this.height / 2, outerRadius, 0, Math.PI * 2);\n    context.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')';\n    context.fill(); // draw inner circle\n\n    context.beginPath();\n    context.arc(this.width / 2, this.height / 2, radius, 0, Math.PI * 2);\n    context.fillStyle = 'rgba(255, 100, 100, 1)';\n    context.strokeStyle = 'white';\n    context.lineWidth = 2 + 4 * (1 - t);\n    context.fill();\n    context.stroke(); // update this image's data with data from the canvas\n\n    this.data = context.getImageData(0, 0, this.width, this.height).data; // continuously repaint the map, resulting in the smooth animation of the dot\n\n    map.triggerRepaint(); // return `true` to let the map know that the image was updated\n\n    return true;\n  }\n};\nexport default class MapBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 103.02301,\n      lat: 9.17682,\n      zoom: 2,\n      dotSize: 100\n    };\n  }\n\n  componentDidMount() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: element => this.mapContainer = element,\n      className: \"mapContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/HungNguyen/SideProject/covid-19-track-map/src/mapBox.js"],"names":["React","ReactDOM","mapboxgl","accessToken","pulsingDot","width","size","height","data","Uint8Array","onAdd","canvas","document","createElement","context","getContext","render","duration","t","performance","now","radius","outerRadius","clearRect","beginPath","arc","Math","PI","fillStyle","fill","strokeStyle","lineWidth","stroke","getImageData","map","triggerRepaint","MapBox","Component","constructor","props","state","lng","lat","zoom","dotSize","componentDidMount","Map","container","mapContainer","style","center","element"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiaHVuZ3RoZXpvcmJhIiwiYSI6ImNrYnE5MTZxYjJrNmMyc3B2YXZtdnFjb20ifQ.iEtRPDaQs56Mr53uQEh65A';\n\nvar pulsingDot = {\n    width: size,\n    height: size,\n    data: new Uint8Array(size * size * 4),\n     \n    // get rendering context for the map canvas when layer is added to the map\n    onAdd: function() {\n    var canvas = document.createElement('canvas');\n    canvas.width = this.width;\n    canvas.height = this.height;\n    this.context = canvas.getContext('2d');\n    },\n     \n    // called once before every frame where the icon will be used\n    render: function() {\n    var duration = 1000;\n    var t = (performance.now() % duration) / duration;\n     \n    var radius = (size / 2) * 0.3;\n    var outerRadius = (size / 2) * 0.7 * t + radius;\n    var context = this.context;\n     \n    // draw outer circle\n    context.clearRect(0, 0, this.width, this.height);\n    context.beginPath();\n    context.arc(\n    this.width / 2,\n    this.height / 2,\n    outerRadius,\n    0,\n    Math.PI * 2\n    );\n    context.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')';\n    context.fill();\n     \n    // draw inner circle\n    context.beginPath();\n    context.arc(\n    this.width / 2,\n    this.height / 2,\n    radius,\n    0,\n    Math.PI * 2\n    );\n    context.fillStyle = 'rgba(255, 100, 100, 1)';\n    context.strokeStyle = 'white';\n    context.lineWidth = 2 + 4 * (1 - t);\n    context.fill();\n    context.stroke();\n     \n    // update this image's data with data from the canvas\n    this.data = context.getImageData(\n    0,\n    0,\n    this.width,\n    this.height\n    ).data;\n     \n    // continuously repaint the map, resulting in the smooth animation of the dot\n    map.triggerRepaint();\n     \n    // return `true` to let the map know that the image was updated\n    return true;\n    }\n    };\n\nexport default class MapBox extends React.Component {\n\n    \n\n    constructor(props) {\n        super(props);\n        this.state = {\n        lng: 103.02301,\n        lat: 9.17682,\n        zoom: 2,\n        dotSize: 100\n        };\n    }\n\n    componentDidMount() {\n        const map = new mapboxgl.Map({\n        container: this.mapContainer,\n        style: 'mapbox://styles/mapbox/streets-v11',\n        center: [this.state.lng, this.state.lat],\n        zoom: this.state.zoom\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div ref={element => this.mapContainer = element} className=\"mapContainer\"/>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}