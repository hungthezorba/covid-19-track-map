{"ast":null,"code":"var _jsxFileName = \"/Users/HungNguyen/SideProject/covid-19-track-map/client/src/mapBox.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\n\nrequire('dotenv').config();\n\nmapboxgl.accessToken = process.env.REACT_APP_MAP_BOX_TOKEN;\nexport default class MapBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.mapRef = React.createRef();\n    this.state = {\n      map: undefined,\n      lng: 106.660172,\n      lat: 10.762622,\n      zoom: 2,\n      dotSize: 100,\n      covidData: [],\n      geoData: [],\n      testdata: [{\n        \"type\": \"Feature\",\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [1.601554, 42.546245]\n        },\n        \"properties\": {\n          \"title\": \"Andorra\",\n          \"description\": \"<strong>Total Confirmed:</strong><p>855</p><strong>Total Deaths:</strong> <p>52</p>\"\n        }\n      }, {\n        \"type\": \"Feature\",\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [0, 1]\n        },\n        \"properties\": {\n          \"title\": \"Andorra\",\n          \"description\": \"<strong>Total Confirmed:</strong><p>855</p><strong>Total Deaths:</strong> <p>52</p>\"\n        }\n      }]\n    };\n  }\n\n  fetchCovid19API() {\n    fetch('http://localhost:8080/').then(res => res.json()).then(result => {\n      result.forEach(item => {\n        var tempJson = {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [item.longitude, item.latitude]\n          },\n          properties: {\n            title: item.Country,\n            description: `<p><strong>Total Confirmed: </strong>${item.TotalConfirmed}</p><p><strong>Total Deaths: </strong>${item.TotalDeaths}</p>`\n          }\n        };\n        var joined = this.state.geoData.concat(tempJson);\n        this.setState({\n          covidData: result,\n          geoData: joined\n        });\n      });\n      this.createMap(this.state.geoData);\n    });\n  }\n\n  createMap(map) {\n    const dotSize = this.state.dotSize;\n    const geoData = this.state.geoData;\n    map.on('load', () => {\n      map.addImage('pulsing-dot', pulsingDot, {\n        pixelRatio: 2\n      });\n      map.addSource('points', {\n        'type': 'geojson',\n        'data': {\n          'type': 'FeatureCollection',\n          'features': geoData\n        }\n      });\n      map.addLayer({\n        'id': 'points',\n        'type': 'symbol',\n        'source': 'points',\n        'layout': {\n          'icon-image': 'pulsing-dot'\n        }\n      });\n      map.on('click', 'points', function (e) {\n        var coordinates = e.features[0].geometry.coordinates.slice();\n        var description = e.features[0].properties.description; // Ensure that if the map is zoomed out such that multiple\n        // copies of the feature are visible, the popup appears\n        // over the copy being pointed to.\n\n        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n        }\n\n        new mapboxgl.Popup({\n          className: \"pop-up-map-box\"\n        }).setLngLat(coordinates).setHTML(description).addTo(map);\n      });\n      map.on('mouseenter', 'points', function () {\n        map.getCanvas().style.cursor = 'pointer';\n      }); // Change it back to a pointer when it leaves.\n\n      map.on('mouseleave', 'points', function () {\n        map.getCanvas().style.cursor = '';\n      });\n    });\n    const pulsingDot = {\n      width: dotSize,\n      height: dotSize,\n      data: new Uint8Array(dotSize * dotSize * 4),\n      onAdd: function () {\n        var canvas = document.createElement('canvas');\n        this.context = canvas.getContext('2d');\n      },\n      render: function () {\n        var duration = 2000;\n        var t = performance.now() % duration / duration;\n        var radius = dotSize / 2 * 0.3;\n        var outerRadius = dotSize / 2 * 0.7 * t + radius;\n        var context = this.context; // draw outer circle\n\n        context.clearRect(0, 0, this.width, this.height);\n        context.beginPath();\n        context.arc(this.width / 2, this.height / 2, outerRadius, 0, Math.PI * 2);\n        context.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')';\n        context.fill(); // draw inner circle\n\n        context.beginPath();\n        context.arc(this.width / 2, this.height / 2, radius, 0, Math.PI * 2);\n        context.fillStyle = 'rgba(255, 100, 100, 1)';\n        context.strokeStyle = 'white';\n        context.lineWidth = 2 + 4 * (1 - t);\n        context.fill();\n        context.stroke(); // update this image's data with data from the canvas\n\n        this.data = context.getImageData(0, 0, this.width, this.height).data; // continuously repaint the map, resulting in the smooth animation of the dot\n\n        map.triggerRepaint(); // return `true` to let the map know that the image was updated\n\n        return true;\n      }\n    };\n  }\n\n  flyToCountry(map, coordinates, description) {\n    map.flyTo({\n      center: coordinates,\n      zoom: 5\n    });\n    new mapboxgl.Popup({\n      className: \"pop-up-from-list\"\n    }).setLngLat(coordinates).setHTML(description).addTo(map);\n  }\n\n  async componentDidMount() {\n    await fetch('http://localhost:8080/').then(res => res.json()).then(result => {\n      result.forEach(item => {\n        var tempJson = {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [item.longitude, item.latitude]\n          },\n          properties: {\n            title: item.Country,\n            description: `<h3>${item.Country}</h3><p><strong>Total Confirmed: </strong>${item.TotalConfirmed}</p><p><strong>Total Deaths: </strong>${item.TotalDeaths}</p>`\n          }\n        };\n        var joined = this.state.geoData.concat(tempJson);\n        this.setState({\n          covidData: result,\n          geoData: joined\n        });\n      });\n    });\n    this.map = new mapboxgl.Map({\n      container: this.mapRef.current,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n    this.setState({\n      map: this.map\n    });\n    this.createMap(this.map);\n  }\n\n  render() {\n    var map = this.state.map != undefined ? this.state.map : '';\n\n    var popUpDescription = function (totalConfirmed, totalDeaths) {\n      return `<p><strong>Total Confirmed: </strong>${totalConfirmed}</p><p><strong>Total Deaths: </strong>${totalDeaths}</p>`;\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.mapRef,\n      className: \"mapContainer pad2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar pad2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"listings\",\n      className: \"listings\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 21\n      }\n    }, map != \"\" ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 25\n      }\n    }, this.state.covidData.map((country, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"item\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => this.flyToCountry(map, [country.longitude, country.latitude], popUpDescription(country.TotalConfirmed, country.TotalDeaths)),\n      className: \"title\",\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 33\n      }\n    }, country.Country), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 33\n      }\n    }, country.TotalConfirmed)))) : '')));\n  }\n\n}","map":{"version":3,"sources":["/Users/HungNguyen/SideProject/covid-19-track-map/client/src/mapBox.js"],"names":["React","useState","ReactDOM","mapboxgl","require","config","accessToken","process","env","REACT_APP_MAP_BOX_TOKEN","MapBox","Component","constructor","props","mapRef","createRef","state","map","undefined","lng","lat","zoom","dotSize","covidData","geoData","testdata","fetchCovid19API","fetch","then","res","json","result","forEach","item","tempJson","type","geometry","coordinates","longitude","latitude","properties","title","Country","description","TotalConfirmed","TotalDeaths","joined","concat","setState","createMap","on","addImage","pulsingDot","pixelRatio","addSource","addLayer","e","features","slice","Math","abs","lngLat","Popup","className","setLngLat","setHTML","addTo","getCanvas","style","cursor","width","height","data","Uint8Array","onAdd","canvas","document","createElement","context","getContext","render","duration","t","performance","now","radius","outerRadius","clearRect","beginPath","arc","PI","fillStyle","fill","strokeStyle","lineWidth","stroke","getImageData","triggerRepaint","flyToCountry","flyTo","center","componentDidMount","Map","container","current","popUpDescription","totalConfirmed","totalDeaths","country","index"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\n\nrequire('dotenv').config()\n\nmapboxgl.accessToken = process.env.REACT_APP_MAP_BOX_TOKEN;\n\n\n\nexport default class MapBox extends React.Component {\n    mapRef = React.createRef();\n    map;\n    constructor(props) {\n        super(props);\n        this.state = {\n            map : undefined,\n            lng: 106.660172,\n            lat: 10.762622,\n            zoom: 2,\n            dotSize: 100,\n            covidData: [],\n            geoData: [],\n            testdata: [\n                {\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [1.601554, 42.546245]\n                    },\n                    \"properties\": {\n                        \"title\": \"Andorra\",\n                        \"description\": \"<strong>Total Confirmed:</strong><p>855</p><strong>Total Deaths:</strong> <p>52</p>\"\n                    }\n                },\n                {\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [0, 1]\n                    },\n                    \"properties\": {\n                        \"title\": \"Andorra\",\n                        \"description\": \"<strong>Total Confirmed:</strong><p>855</p><strong>Total Deaths:</strong> <p>52</p>\"\n                    }\n                }\n\n            ]\n        }\n\n    }\n\n    fetchCovid19API() {\n        fetch('http://localhost:8080/')\n            .then(res => res.json())\n            .then(result => {\n                result.forEach(item => {\n                    var tempJson = {\n                        type: 'Feature',\n                        geometry: {\n                            type: 'Point',\n                            coordinates: [item.longitude, item.latitude]\n                        },\n                        properties: {\n                            title: item.Country,\n                            description: `<p><strong>Total Confirmed: </strong>${item.TotalConfirmed}</p><p><strong>Total Deaths: </strong>${item.TotalDeaths}</p>`\n                        }\n                    }\n                    var joined = this.state.geoData.concat(tempJson)\n                    this.setState({ covidData: result, geoData: joined })\n                })\n                this.createMap(this.state.geoData)\n            })\n\n    }\n\n    createMap(map) {\n\n        const dotSize = this.state.dotSize\n        const geoData = this.state.geoData\n\n        map.on('load',  () => {\n            map.addImage('pulsing-dot', pulsingDot, { pixelRatio: 2 });\n            map.addSource('points', {\n                'type': 'geojson',\n                'data': {\n                    'type': 'FeatureCollection',\n                    'features': geoData\n                }\n            });\n\n\n         map.addLayer({\n                'id': 'points',\n                'type': 'symbol',\n                'source': 'points',\n                'layout': {\n                    'icon-image': 'pulsing-dot'\n                }\n            });\n\n            map.on('click', 'points', function (e) {\n                var coordinates = e.features[0].geometry.coordinates.slice();\n                var description = e.features[0].properties.description;\n\n                // Ensure that if the map is zoomed out such that multiple\n                // copies of the feature are visible, the popup appears\n                // over the copy being pointed to.\n                while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n                    coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n                }\n\n                new mapboxgl.Popup({ className: \"pop-up-map-box\" })\n                    .setLngLat(coordinates)\n                    .setHTML(description)\n                    .addTo(map);\n            });\n            map.on('mouseenter', 'points', function () {\n                map.getCanvas().style.cursor = 'pointer';\n            });\n\n            // Change it back to a pointer when it leaves.\n            map.on('mouseleave', 'points', function () {\n                map.getCanvas().style.cursor = '';\n            });\n\n        });\n\n        const pulsingDot = {\n            width: dotSize,\n            height: dotSize,\n            data: new Uint8Array(dotSize * dotSize * 4),\n            onAdd: function () {\n                var canvas = document.createElement('canvas');\n                this.context = canvas.getContext('2d');\n            },\n            render: function () {\n                var duration = 2000;\n                var t = (performance.now() % duration) / duration;\n\n                var radius = (dotSize / 2) * 0.3;\n                var outerRadius = (dotSize / 2) * 0.7 * t + radius;\n                var context = this.context;\n\n                // draw outer circle\n                context.clearRect(0, 0, this.width, this.height);\n                context.beginPath();\n                context.arc(\n                    this.width / 2,\n                    this.height / 2,\n                    outerRadius,\n                    0,\n                    Math.PI * 2\n                );\n                context.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')';\n                context.fill();\n\n                // draw inner circle\n                context.beginPath();\n                context.arc(\n                    this.width / 2,\n                    this.height / 2,\n                    radius,\n                    0,\n                    Math.PI * 2\n                );\n                context.fillStyle = 'rgba(255, 100, 100, 1)';\n                context.strokeStyle = 'white';\n                context.lineWidth = 2 + 4 * (1 - t);\n                context.fill();\n                context.stroke();\n\n                // update this image's data with data from the canvas\n                this.data = context.getImageData(\n                    0,\n                    0,\n                    this.width,\n                    this.height\n                ).data;\n\n                // continuously repaint the map, resulting in the smooth animation of the dot\n                map.triggerRepaint()\n                // return `true` to let the map know that the image was updated\n                return true;\n            }\n        }\n\n\n\n    }\n\n    flyToCountry(map, coordinates, description) {\n        map.flyTo({\n            center: coordinates,\n            zoom: 5\n        })\n\n        new mapboxgl.Popup({ className: \"pop-up-from-list\" })\n                    .setLngLat(coordinates)\n                    .setHTML(description)\n                    .addTo(map);\n\n    }\n\n\n    async componentDidMount() {\n        await fetch('http://localhost:8080/')\n            .then(res => res.json())\n            .then(result => {\n                result.forEach(item => {\n                    var tempJson = {\n                        type: 'Feature',\n                        geometry: {\n                            type: 'Point',\n                            coordinates: [item.longitude, item.latitude]\n                        },\n                        properties: {\n                            title: item.Country,\n                            description: `<h3>${item.Country}</h3><p><strong>Total Confirmed: </strong>${item.TotalConfirmed}</p><p><strong>Total Deaths: </strong>${item.TotalDeaths}</p>`\n                        }\n                    }\n                    var joined = this.state.geoData.concat(tempJson)\n                    this.setState({ covidData: result, geoData: joined })\n                })\n            })\n            this.map = new mapboxgl.Map({\n                container: this.mapRef.current,\n                style: 'mapbox://styles/mapbox/streets-v11',\n                center: [this.state.lng, this.state.lat],\n                zoom: this.state.zoom\n            });\n            this.setState({map: this.map})\n            this.createMap(this.map)\n    }\n\n\n    render() {\n        var map = this.state.map != undefined ? this.state.map : ''\n        var popUpDescription = function(totalConfirmed, totalDeaths) { \n            return `<p><strong>Total Confirmed: </strong>${totalConfirmed}</p><p><strong>Total Deaths: </strong>${totalDeaths}</p>`\n        }\n    \n        return (\n            <div className=\"row\">\n                <div ref={this.mapRef} className=\"mapContainer pad2\" />\n                <div className=\"sidebar pad2\">\n                    <div className=\"heading\">\n                        <h1></h1>\n                    </div>\n                    <div id=\"listings\" className=\"listings\">\n                        {map != \"\" ? \n                        <div>\n                            {this.state.covidData.map((country, index) =>\n                            <div className=\"item\" key={index}>\n                                <a onClick={() => this.flyToCountry(map, [country.longitude, country.latitude], popUpDescription(country.TotalConfirmed, country.TotalDeaths))} className=\"title\" href=\"#\">{country.Country}</a>\n                                <div>{country.TotalConfirmed}</div>\n                            </div>\n                        )}\n                \n                            </div>\n                        :    \n                        ''\n                    }\n                        \n                    \n                        \n                    </div>\n                </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}